%% Residuals calculation
%Load background data here to have it subtracted from the image
tic
clear;clc;close all
set(0,'DefaultFigureWindowStyle','docked')
%Set w and h to the dimensions of the image
w = 1200;
h = 1200;
x = 1:w;
y = 1:h;
X_fit = 1:1:w;
Y_fit = 1:1:h;
sumNum = 1;
n = floor(400/sumNum);
res = zeros(n,1);
Rsquare = zeros(n,1);
X_coord = zeros(n,1);
Y_coord = zeros(n,1);
Bounds_X = zeros(n,2);
Bounds_Y = zeros(n,2);


%% Load Images into Array
Images = cell(400,1);
for s = 1:400
    Im = fitsread(sprintf('SummedIm_%d.fit',s));
    Images{s} = Im;
end
%% Sum Images and Store

Sums = cell(n,1);

for t = 1:n
    u = (1-sumNum)+sumNum*t;
    v = u + sumNum -1;
    totalSum = zeros(h,w);
    for k = u:v
        Iter = Images{k};
        totalSum = totalSum + Iter;
    end
    Sums{t} = totalSum;
end


%% Process Images
%l determines the number of image combinations you want to check

for l = 1:400
    Data = Sums{l};
    [max_num, max_idx] = max(Data(:));
    [Xc,Yc] = ind2sub(size(Data),max_idx);
    Z_fit = double(Data);
    format long
    [fitresult, gof] = R_createFit(X_fit, Y_fit, Z_fit,Xc,Yc);  %uses fit code to create a fit
    title(sprintf('%d',l));
    coeff = coeffvalues(fitresult);
    X_coord(l) = coeff(5);
    Y_coord(l) = coeff(6);
    Rsquare(l) = gof.rsquare;
    Avg = Data/l;
    Diff = zeros(w,h);
    for j = 1:l
        val = (Images{j}-Avg).^2;
        Diff = Diff + val;
    end
    %Diff = (Data-fitresult(x,y)).^2;   %Use if comparing images to the
    %fitted value
    pixelSum = sum(Diff,'all');
    res(l) = (1/l)*sqrt(pixelSum);
    confintervals = confint(fitresult);
    Bounds_X(l,1) = confintervals(1,5);
    Bounds_X(l,2) = confintervals(2,5);
    Bounds_Y(l,1) = confintervals(1,6);
    Bounds_Y(l,2) = confintervals(2,6);
end
display(gof.rsquare);
hold off
%% Figures
figure ('Name','X Coordinates');
plot(X_coord,'ko'); hold on
yline(615.8184,'r');
title(sprintf('X Coordinates of sums of %d images',sumNum));
xlabel('Summed Image Number');
ylabel('X Coordinate in pixels');
hold off

figure ('Name','Y Coordinates');
plot(Y_coord,'bo'); hold on
yline(598.2538,'r');
title(sprintf('Y Coordinates of sums of %d images',sumNum));
xlabel('Summed Image Number');
ylabel('Y Coordinate in pixels');
hold off

%{
% figure ('Name','Fit');
% plot(fitresult);
% title('Fit generated by program');
% 
% 
% a = coeff(1);
% b = coeff(2);
% c = coeff(3);
% d = coeff(4);
% e = coeff(5);
% f = coeff(6);
% [X,Y] = meshgrid(x,y);
% g = a+b.*exp(-c.*(X-e).^2-d.*(Y-f).^2);
% figure; surf(X,Y,g);
% shading interp
% title('Plotted fit function');
% 
% comparison = Data - g;
% figure;
% surf(x,y,comparison)
% shading interp
% view([0,90])
% axis equal
% title('Bad image fit subtracted from original summed image (166 images)')
% xlim([x(1),x(end)]);
% ylim([y(1),y(end)]);
%}
toc

%% Next Neighbor
%{
clear;clc;
im1 = matfile('X_coords.mat');
Xs = im1.X_coord;
im2 = matfile('Y_coords.mat');
Ys = im2.Y_coord;
length = size(Xs);
n = length(1);
Xsum = 0;
Ysum = 0;
for i = 1:n/2
    m = 2*i;
    if m+1 > n
        break
    end
    Xdiff = (Xs(m) - Xs(m+1))^2;
    Ydiff = (Ys(m) - Ys(m+1))^2;
    Xsum = Xsum + Xdiff;
    Ysum = Ysum + Ydiff;
end
XsigmaNN = sqrt(Xsum)/(n/2 - 1);
YsigmaNN = sqrt(Ysum)/(n/2 - 1);
Xpixel = XsigmaNN*4.54;
Ypixel = YsigmaNN*4.54;
display(XsigmaNN);
display(Xpixel);
display(YsigmaNN);
display(Ypixel);
%}
